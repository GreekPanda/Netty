<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.innjoo.halo.dao.HaloUserMapper" >
  <resultMap id="BaseResultMap" type="com.innjoo.halo.model.HaloUser" >
    <id column="id" property="id" jdbcType="INTEGER" />
    <result column="email" property="email" jdbcType="VARCHAR" />
    <result column="password" property="password" jdbcType="CHAR" />
    <result column="token" property="token" jdbcType="CHAR" />
    <result column="regist_from" property="registFrom" jdbcType="VARCHAR" />
    <result column="last_login_time" property="lastLoginTime" jdbcType="TIMESTAMP" />
    <result column="last_login_ip" property="lastLoginIp" jdbcType="VARCHAR" />
  </resultMap>
  <sql id="Base_Column_List" >
    id, email, password, token, regist_from, last_login_time, last_login_ip
  </sql>
  <select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="java.lang.Integer" >
    select 
    <include refid="Base_Column_List" />
    from halo_user
    where id = #{id,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer" >
    delete from halo_user
    where id = #{id,jdbcType=INTEGER}
  </delete>
  <insert id="insert" parameterType="com.innjoo.halo.model.HaloUser" >
    insert into halo_user (id, email, password, 
      token, regist_from, last_login_time, 
      last_login_ip)
    values (#{id,jdbcType=INTEGER}, #{email,jdbcType=VARCHAR}, #{password,jdbcType=CHAR}, 
      #{token,jdbcType=CHAR}, #{registFrom,jdbcType=VARCHAR}, #{lastLoginTime,jdbcType=TIMESTAMP}, 
      #{lastLoginIp,jdbcType=VARCHAR})
  </insert>
  <insert id="insertSelective" parameterType="com.innjoo.halo.model.HaloUser" >
    insert into halo_user
    <trim prefix="(" suffix=")" suffixOverrides="," >
      <if test="id != null" >
        id,
      </if>
      <if test="email != null" >
        email,
      </if>
      <if test="password != null" >
        password,
      </if>
      <if test="token != null" >
        token,
      </if>
      <if test="registFrom != null" >
        regist_from,
      </if>
      <if test="lastLoginTime != null" >
        last_login_time,
      </if>
      <if test="lastLoginIp != null" >
        last_login_ip,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides="," >
      <if test="id != null" >
        #{id,jdbcType=INTEGER},
      </if>
      <if test="email != null" >
        #{email,jdbcType=VARCHAR},
      </if>
      <if test="password != null" >
        #{password,jdbcType=CHAR},
      </if>
      <if test="token != null" >
        #{token,jdbcType=CHAR},
      </if>
      <if test="registFrom != null" >
        #{registFrom,jdbcType=VARCHAR},
      </if>
      <if test="lastLoginTime != null" >
        #{lastLoginTime,jdbcType=TIMESTAMP},
      </if>
      <if test="lastLoginIp != null" >
        #{lastLoginIp,jdbcType=VARCHAR},
      </if>
    </trim>
  </insert>
  <update id="updateByPrimaryKeySelective" parameterType="com.innjoo.halo.model.HaloUser" >
    update halo_user
    <set >
      <if test="email != null" >
        email = #{email,jdbcType=VARCHAR},
      </if>
      <if test="password != null" >
        password = #{password,jdbcType=CHAR},
      </if>
      <if test="token != null" >
        token = #{token,jdbcType=CHAR},
      </if>
      <if test="registFrom != null" >
        regist_from = #{registFrom,jdbcType=VARCHAR},
      </if>
      <if test="lastLoginTime != null" >
        last_login_time = #{lastLoginTime,jdbcType=TIMESTAMP},
      </if>
      <if test="lastLoginIp != null" >
        last_login_ip = #{lastLoginIp,jdbcType=VARCHAR},
      </if>
    </set>
    where id = #{id,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.innjoo.halo.model.HaloUser" >
    update halo_user
    set email = #{email,jdbcType=VARCHAR},
      password = #{password,jdbcType=CHAR},
      token = #{token,jdbcType=CHAR},
      regist_from = #{registFrom,jdbcType=VARCHAR},
      last_login_time = #{lastLoginTime,jdbcType=TIMESTAMP},
      last_login_ip = #{lastLoginIp,jdbcType=VARCHAR}
    where id = #{id,jdbcType=INTEGER}
  </update>
</mapper>